import type { Metadata } from "next";
import { Manrope, Playfair_Display } from "next/font/google";
import "./globals.css";
import { Header } from "@/components/layout/header";
import {
    getDestinationsList,
    getGlobalSettings,
    getParentPackagesList,
} from "@/data/loaders";
import Footer from "@/components/layout/footer";
import { Toaster } from "sonner";
import { dir } from "i18next";
import { hasLocale, NextIntlClientProvider } from "next-intl";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import { setRequestLocale } from "next-intl/server";
import Script from "next/script";

const playFairDisplay = Playfair_Display({
    variable: "--font-playfair-display",
    subsets: ["latin"],
});

const manrope = Manrope({
    variable: "--font-manrope",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export async function generateStaticParams() {
    return routing.locales.map((lng) => ({ locale: lng }));
}

async function loader(locale: string) {
    const [data, destinations, packages] = await Promise.all([
        getGlobalSettings(locale),
        getDestinationsList(),
        getParentPackagesList(),
    ]);
    if (!data && data.data) throw new Error("Failed to fetch global settings");
    return {
        header: data.data?.header,
        footer: data.data?.footer,
        destinations: destinations.data,
        packages: packages.data,
    };
}

export default async function RootLayout({
    children,
    params,
}: Readonly<{
    children: React.ReactNode;
    params: Promise<{ locale: string }>;
}>) {
    const locale = (await params).locale;
    const { header, footer, destinations, packages } = await loader(
        locale || "en"
    );

    if (!hasLocale(routing.locales, locale)) {
        notFound();
    }

    // Enable static rendering
    setRequestLocale(locale);

    return (
        <NextIntlClientProvider>
            <html lang={locale || "en"} dir={dir(locale)}>
                <head>
                    {/* GTM Script (Head) */}
                    <Script id="gtm-script" strategy="afterInteractive">
                        {`
            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','GTM-TNGFMDZL');
          `}
                    </Script>
                </head>
                <body
                    className={`${playFairDisplay.variable} ${manrope.variable} antialiased max-w-screen`}
                >
                    {/* GTM noscript (Body) */}
                    <noscript>
                        <iframe
                            src="https://www.googletagmanager.com/ns.html?id=GTM-TNGFMDZL"
                            height="0"
                            width="0"
                            style={{ display: "none", visibility: "hidden" }}
                        ></iframe>
                    </noscript>

                    <Header
                        {...header}
                        destinations={destinations}
                        packages={packages}
                        locale={locale}
                    />
                    {children}
                    <Footer {...footer} />
                    <Toaster richColors position="top-right" />
                </body>
            </html>
        </NextIntlClientProvider>
    );
}
